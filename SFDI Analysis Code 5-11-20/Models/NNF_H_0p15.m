function [y1] = NNF_H_0p15(x1)
%NNF_H_0P15 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Dec-2019 13:15:00.
% 
% [y1] = NNF_H_0p15(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00129117185931218;0.237537409132807];
x1_step1.gain = [10.1157294968078;0.420166092857931];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.7352812581833774175;4.7329558494750214592;3.9640254286841405396;-4.2623795209214128121;-2.5435794773014350767;0.8387332340321607127;3.5757073330554738355;-1.8657243314940028522;-0.10842051703790131501;-1.9514056137967163984;0.73944202716988194357;0.08781991592039589678;1.0835353234250102439;2.0570699994316354875;-2.0811076556620786704;2.2116863606922003704;-1.7907388462663316187;5.0349218359440737203;4.1554372736642148922;-5.8072289952455449225];
IW1_1 = [2.7660331657548398177 3.7661401497887547762;0.18280116405002327928 5.296693341300457547;-2.3633253810454628585 -3.4551632355128600871;0.78527771716382488432 6.1561031097078862118;-0.014564133004901898272 -3.540236986042048617;-0.12380256161656102987 2.0849775972989923467;0.37805695694976465537 -5.1581214165719337927;5.363330894401434179 0.80850303031569925594;0.13599701227060112529 0.71452666858321733923;0.035910976157575408285 -4.2371784245623791421;0.5493685020496160698 -0.89803754002856983618;0.24694131802151186861 -1.3996388274173274802;0.71424722236469495584 -5.8353644455563546956;6.0269362093256377833 0.886940168659866357;-0.66027850765464712879 -2.0513264525312764341;2.3059309961477900686 0.49855197985740379307;-1.1756565718193283665 0.76343752895436067796;4.355440440206828967 0.42392743693256285109;2.7349069627647839553 -0.80425467882292112076;-1.3727898204398254478 -5.1172612569876489985];

% Layer 2
b2 = 0.18446739567522232872;
LW2_1 = [-0.00038738239382554744876 0.060095437614454141895 0.00061746581660062152541 -0.00018783042357872300923 -0.14658017293034214523 0.22154214986434472845 -0.0015912510903589845244 -0.00025633040717351060012 -0.24938078390484133551 -0.014176614133664947742 -0.32036407606517874891 -0.29584060163273306898 0.00093950463875438420657 0.00029252241593839893282 -0.053705118087005135341 0.022281977357070117951 0.27788784328998178408 0.027539232742563694856 -0.21532124036608962792 -0.0089206846239230953854];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.39181105670213;
y1_step1.xoffset = 0.0171494800597429;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
