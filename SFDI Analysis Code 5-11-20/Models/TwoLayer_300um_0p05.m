function [y1] = TwoLayer_0p05(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 26-Nov-2019 01:26:31.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00195688424782555;0.00286794872484013;0.102356089305158;0.104544806344175];
x1_step1.gain = [10.1130926615922;10.2887019863994;0.290105608706677;0.293219133934662];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.9368289309087169947;-0.95301114447717916178;-4.2256132242169179847;-1.1063822266983629472;-0.58321945359364169015;2.3504509486809710417;0.56357310801842952497;0.0026275562386293433575;3.0535551621963628044;1.7350915354294544901;-5.4301996964420782277;1.1624215756548292866;-1.1932568716862179681;1.7605357056669430627;3.7167866425188167412;0.36901048876498748763;-0.79591016105363165956;-5.4740896089521386969;-5.614798271253820694;-1.9089487874720818539];
IW1_1 = [0.28640188248970210871 -0.0060095351291678160768 -2.2797375134862418733 0.12299527241196130112;-0.17216237087919167292 0.29787472097150508032 0.040184480424967368439 -0.74066512620343205597;-0.14539510835934643662 -1.5334074938351540673 0.0052334863366856184883 -1.2363871599972571236;-0.033756155009892228891 -0.3080308911434057606 0.72020395090028477281 -0.54716244181382145406;-0.16951393352596985653 -0.14779655267769750693 -0.80044130492844745017 0.057776027173370769763;0.10207097287811808806 1.228407107670634657 0.14046820910759766354 0.32206550709516063025;0.26926448351439902229 0.25208404319495664181 0.092586821315847417369 -0.76557320150469609921;-0.13329193368311742507 -0.11693169626196978084 -0.39015926261835204292 -0.33491080155655866823;0.12393563264041786154 0.076082926281778748279 0.91935354892013854133 1.6456420139300080852;-0.015482571035275024748 -0.030390692847826545481 -0.19206498633017016209 2.2218716965103926242;-0.026457983417563616518 -0.054621460047732106613 0.24059670790876616642 -5.8151814893488529279;0.2243498352718093225 -0.25527116669936239512 0.15543605352507045003 -0.30557244225417251604;-0.1072539802296222089 -0.043637670573794667961 -0.470357192252789158 0.017061388790539245425;0.25261529294969253812 0.28173528627950011893 1.337862257668247068 -0.022028481546615123754;0.1251002995706521348 0.069459000905702658613 1.1452975812238050946 1.4902345896605939668;-0.045307188120607917725 -0.047304543776055932303 -0.11865432412315587984 0.9909981567920640444;-0.014262833432187827995 0.012450289950016417764 0.12216687429392719677 -0.53213983843158352283;-0.094004154948316806517 -0.57175920052613593558 -0.40445470166029084957 -3.7688939428735861448;-0.2606889509128297866 -3.7698509886599538277 -0.0086911352470952739357 0.14479448745478884497;-0.53825968845194616108 -0.55948325135265353225 -0.089298760513789626758 0.63507256092187991392];

% Layer 2
b2 = -0.94033696085470919179;
LW2_1 = [0.48039362148355568838 -0.16062203224516996558 -3.4116685860056423785 -0.09704805377867843641 0.72698579878975322366 -1.2926870020078498058 -0.41374900709611822647 0.33123460514357339068 1.5342790602888494167 0.41497774988281571629 -0.13111974670816081701 -0.45625273378543523828 -5.3964391683592909388 -0.52960165263772929212 -3.2146834099305969801 1.3012114035722672778 4.2306551088811401584 -1.5750017287651401077 1.3978238953300066161 0.50595494509052840737];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.68533512354704;
y1_step1.xoffset = 0.0348423384130001;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
