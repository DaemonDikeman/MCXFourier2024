function [y1] = NNF_H_0p1(x1)
%NNF_H_0P1 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Dec-2019 13:14:55.
% 
% [y1] = NNF_H_0p1(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00119888420523393;0.237537409132807];
x1_step1.gain = [10.0623950947506;0.420166092857931];
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.4144971366730638707;-6.381509747852518899;-4.498586541991139498;-2.1560697766292471478;-3.3468381453120970015;-3.8989644557110723078;1.4870538748706816357;0.93696506360694309379;-1.1040194465183164052;1.2920085364327356103;0.088597442907135615098;0.65491137408598654179;0.12508305866585459065;2.696795888914339745;1.5281698617468124635;-1.7198703689353449509;-2.886438162229878035;5.1093345754965024952;-5.4985804784368408349;6.5878179050816090268];
IW1_1 = [4.514692121955548032 2.4717139215247807549;4.5004963347730733148 2.4472129645663072139;0.049946121823416775309 -4.6962751782815361778;0.17649616626813216524 -2.5699660010889187056;2.7093217315727806671 4.4476203248947330238;4.878260349997391998 -2.4998650505710573455;-2.4577397864280010609 -3.8293872036582077278;-0.3989673075990457507 1.4679920307920939493;5.7464507873839183461 -0.35337581320727406986;-5.5718699214515217122 -2.0142737937709656038;-0.60658502775965006393 1.0084337335991773177;0.58411008770431482873 -0.48450665008210885842;-1.1504639949456627601 -1.810614980091466597;5.2156946371452050926 0.45020306018257255642;0.64123195716073255745 0.68019744249135472014;-0.97571317905864229925 -0.013960923700743161496;-1.4718161512675449476 -1.3462748403937385699;3.2610852417234106326 -0.35109508954977464157;-2.6243395437554282168 -1.9854303672397393132;0.6988568281250884251 4.9642570834106320987];

% Layer 2
b2 = 0.77144267584159209594;
LW2_1 = [-0.24237072349126681514 0.24401048845816339372 -0.06722757053981512354 -0.15683591996714993377 0.00072808996869862285025 -0.00033080633033288924698 -0.0006707638238130506558 0.20752267236120353067 -0.00031177693649667148883 0.00022884332137698340645 0.14915718466976068957 -0.35889771825260802229 -0.0035031489142385643931 0.0008761149421452170882 0.98097509199116161849 1.4270003519527485469 -0.28365511459690018192 -0.61976176142948402603 -0.31240322487589150535 -0.49951240760478066161];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.91244239121351;
y1_step1.xoffset = 0.0232104118913412;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
