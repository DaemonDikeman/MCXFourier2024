function [y1] = TwoLayer_0p2(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 26-Nov-2019 03:35:05.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00157647550779711;0.00125959208773218;0.102356089305158;0.104544806344175];
x1_step1.gain = [10.1431745651551;10.1240410482094;0.290105608706677;0.293219133934662];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.3579447310565244678;-0.11370632356168035304;-7.4721511771837203497;-0.76014067293830811511;0.73252039796790346937;1.6069597009086089567;-0.82852018711753760982;-1.2707150124995447715;-2.4740653993497172536;-0.92450857644730033424;-0.80638830836548447412;-0.52045132586232856209;-1.0485258643241541776;0.4455328749685837364;-0.80116293188861076313;0.69704639877236895806;-1.5138958349000490866;-1.3477349063694945563;-2.5456906067175424369;-1.1789093104350036878];
IW1_1 = [-0.12875926946911386839 -0.10595328087715327747 -3.2046926958315449241 0.27949329854014082208;0.28010854881025637475 -0.12750248732032495869 0.24265031796971620048 0.35742604424266311014;-0.057394647852622084072 -0.11215988980019897525 -0.025932074201515394052 -5.5877463603434334161;0.069423017627679675656 0.2619393459248639533 -0.21399021194452758077 0.2819305452073908036;-0.16630047732223768309 -0.89329906567994121769 0.22555719173844027137 -1.1983287775757702764;0.073599503410989267072 0.074190375290508273065 0.80858578120329616112 -0.25183761211060540219;0.05730248175923606524 0.3407169833546249138 -0.17583139262332742048 0.27351172300434201112;0.035864159388615333979 -0.16332076715531637645 0.11503685829606861979 0.10705251440730376156;-0.15425843292900429105 -0.75589160588991577416 -0.014260408732075608926 0.30259901090560076264;-0.0097040901756473493811 -0.056645162001515259043 -0.87985029400891701101 -0.38897449434982239724;-0.042121464474872818973 -0.048785809441140519371 -1.2885566901409950535 -0.50518696003117058435;-0.2386110012480210929 -0.30251586849505462951 0.15573540964948839882 -0.46692050798597239947;-0.079149712894361359816 0.024087133235669827558 -0.55940473204613083702 0.55405015550399039359;0.068398987486430543048 -0.0024162648353539821662 -0.40412953163427739467 -0.70107506957634624367;-0.052319069869056857025 -0.051677757604201249308 -1.4081609723310783977 -0.5569459865914222485;0.97665138153701147594 -0.14637044929184872544 -1.5738644627031024292 0.13048906261520984429;-0.041019973341411872236 -0.073791627437796131206 -0.32639760329501255054 -0.47685501570498312063;-0.23488650901196694853 -0.097997618329831615025 -0.059609787676781350596 0.30655512691722580643;-0.19362944414106408875 -0.10525809846232603295 -1.0989006424236253956 0.43410387745432038598;-0.022061809103472270616 0.10402335513556894286 -0.45756704180638757551 0.69308395848961146246];

% Layer 2
b2 = 2.1154925243976023808;
LW2_1 = [5.030910817005006308 -0.064396598701409485388 2.5277814275108765329 -2.6018391168724730456 -0.0090988447342435479354 -2.7424457056117432785 1.5519652340731329154 -1.0020864737741206341 0.85449764055077204183 1.7204117146545934158 -2.4662283622674627814 0.19182305770506608011 -1.9971814736476716234 -0.1964867376158845047 1.4639972098176636806 0.0033103433503154189137 -6.4929644869761791171 1.6142762913136439185 -3.3589898574331282788 1.4502147389444322023];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.37770778306555;
y1_step1.xoffset = 0.0155412703752518;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
