function [y1] = NNF_H_0p0(x1)
%NNF_H_0P0 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Dec-2019 13:14:18.
% 
% [y1] = NNF_H_0p0(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00123848097116864;0.237537409132807];
x1_step1.gain = [10.1080423538151;0.420166092857931];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.5016207835915755808;6.8327399326980682304;7.5723272576411000401;-1.8757628710528033711;-1.7183418759593971359;0.064797285736261200917;-2.7928447227688915078;0.49270171186356043203;-0.029805635905954790815;1.3445028679988038078;-1.1498710349016387777;-0.22799813496559925841;2.6628387571315754734;-1.9064509011738812738;2.9831351480513168539;2.6830135580214213853;-9.1174079137721886212;-6.1784516760659942136;28.13415819559378761;17.742670726032947925];
IW1_1 = [3.0822855842098393353 6.0957941193003701841;0.41515003755655571771 5.1109938457862149619;0.41799742422240981909 6.5558611806703801506;3.6784902053431829394 5.5826397960746074745;-0.13923332129456589268 -2.0544406705586397699;-0.79575368619311648288 -0.024170956597954866563;0.27833058354403883428 5.2781336686414457304;-0.19998359325755427074 0.6187150622738935013;-4.5675955984087988071 -3.4974816083095574548;4.1758639820140537324 2.1433368655541675807;-0.17916983389601576215 5.6951849255491424628;-0.6664340271014741468 0.076891411082485372486;4.1316203148534791367 1.8371153779661046901;-0.56331922425434810542 -3.4174200943812973463;1.7865878172469835672 0.068812919610617487298;3.8315624339225173856 -2.3140540851107349596;-8.9272915667785746052 -0.15339108201202469872;-4.8634720433049789534 -1.4116105741359037395;25.865742300134353826 0.27000735745985138259;13.178963870788845014 2.8572815340243327142];

% Layer 2
b2 = 6.0995691666813236509;
LW2_1 = [-0.00027648789376100407333 6.4897821000457014406 -1.0150266293821859076 0.0002648832711098007245 -0.21140905699908071891 -0.36244851789818888221 -0.00075768181543237652763 0.43301224886056127739 -0.00047957266481986853121 0.0024147242040110090781 -0.00050297932123529235076 0.85798994371760206601 0.003963143637916602055 0.010621793111388387262 -3.0346187118444003517 -0.00060310530976945145656 0.15896283686201445606 0.18518795328438653058 -4.4250255916012006807 -4.1180845830810355324];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.24334292033796;
y1_step1.xoffset = 0.0446319468319416;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
