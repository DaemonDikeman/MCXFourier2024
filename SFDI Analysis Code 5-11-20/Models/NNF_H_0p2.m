function [y1] = NNF_H_0p2(x1)
%NNF_H_0P2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Dec-2019 13:15:14.
% 
% [y1] = NNF_H_0p2(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.00104598197468393;0.237537409132807];
x1_step1.gain = [10.0814449593264;0.420166092857931];
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.3918331004699471265;6.0703406537868191961;-4.5979582646414032254;4.6195896275165200251;0.13331263205614041212;-3.238015066669791775;2.2456544765479828918;-1.3136707442681461178;-1.2712768407025802908;-0.47315653940599688987;-0.48873561300570361743;1.908824836498050681;-0.27531923414178838261;3.0808822184073316741;3.6872034451747648376;-3.3828259625860006565;1.580390780791227634;2.8464940424398443852;-1.5114600582439272625;-5.2636991059913018631];
IW1_1 = [5.8834601373569945792 -1.2935157959120751059;-5.6015933334442458147 -1.6608431917282031609;3.1112345703142030295 -3.6835883556189870092;-4.6059161335579332786 -3.6875899598077048758;-0.045156207941169597408 1.6761060124916984382;3.1004423449645437394 -3.9094250489818964667;-6.1902859161021810408 -1.1545641139772899741;-0.037354507533379613382 -2.4653780379099021758;2.2204881801204141567 -2.8525196787577078439;6.0286801076635487817 1.5008457176605660699;4.637694841041672511 2.7587492395066011142;2.4855325820293798778 -1.2764443591987342241;-0.53649867813880269818 0.95888606615972971081;0.20142929203746623434 3.8291373557227430524;1.7999394967539146251 -5.6684255662763494144;-5.4920629839802517225 -0.42119875543625628911;1.0636053332237567215 -0.96577312529602465929;-0.024669976731198126063 -5.2290355513014707967;-0.97277463738113612024 -0.58203070624725516957;-3.3056356203399190896 1.8487136233775836036];

% Layer 2
b2 = -0.017264186243716637958;
LW2_1 = [-0.0030240670609970481987 -0.0015386434007277163295 -0.0072981827484975012391 -0.00076096164321962480107 0.19954977687569733225 -0.0064776318136115333679 -0.00049867965988494543372 -0.19867781690483199419 -0.0080608765773005231631 0.00084514372267714373606 -0.00082742517686613373164 0.011143600748027383124 0.33089741770570335611 0.092245174646481228886 -0.0010452941040889061116 0.0019671723615032666622 -0.31757515472444203253 -0.002608758995190114862 -0.14396192631624324387 0.0819292920423307508];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.925661291043;
y1_step1.xoffset = 0.0137540232390165;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
